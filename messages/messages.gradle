apply plugin: 'java'

def generatedOutputBase = file("src/codecs")
def generateOutputDir = file("$generatedOutputBase/java")

def generatedSource = file(generateOutputDir)

sourceSets {
	generated {
		java.srcDir generatedSource
		compileClasspath += main.output + main.compileClasspath
	}
}

configurations {
	generate.extendsFrom compile
	generated
	smrtTemplates
	codecs
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url 'http://flexo.fearlessgames.se/artifactory/libs-local'
		credentials {
			username = "reader"
			password = "f3ArlessGamesR0X!"
		}
	}
}

dependencies {
	generate'se.smrt:smrt-generator:1.0'
	generate 'org.apache.velocity:velocity:1.7'
	generate 'commons-collections:commons-collections:3.2.1'
	generate 'commons-lang:commons-lang:2.6'
	smrtTemplates project(path: ':smrt', configuration: 'templates')
	compile 'se.fearless.fearless-common:core:1.0-SNAPSHOT'
	compile 'com.google.guava:guava:16.0'
	compile 'se.smrt:smrt-runtime:1.0'
	compile project(':shared')
	compile project(':ardortech')
}

task explodeTemplates(dependsOn: configurations.smrtTemplates, type: Copy) {
	from zipTree(configurations.smrtTemplates.singleFile)
	ext.explodedDir = file("$buildDir/templates")
	into explodedDir

	doFirst {
		explodedDir.mkdirs()
	}
}

compileJava.dependsOn explodeTemplates

compileJava.doFirst {
	generateOutputDir.mkdirs()
}

compileJava.options.compilerArgs = [
			"-Atemplatedir=$explodeTemplates.explodedDir",
			"-processor", "se.smrt.generator.MessageCodeGenerator",
			"-processorpath", configurations.generate.asPath,
			"-s", "$generateOutputDir"

	]

task jarGenerated(type: Jar) {
	from sourceSets.generated.output
	baseName = 'codecs'
}

assemble.dependsOn jarGenerated


artifacts {
	codecs jarGenerated
}

clean {
	delete generatedOutputBase
}
